<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript中的ajax]]></title>
    <url>%2F2019%2F03%2F06%2Fajax%2F</url>
    <content type="text"><![CDATA[什么是ajax]]></content>
  </entry>
  <entry>
    <title><![CDATA[浅谈JavaScript中的闭包]]></title>
    <url>%2F2019%2F03%2F05%2Fclosure%2F</url>
    <content type="text"><![CDATA[什么是闭包闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。换句话说：闭包就是能够读取其他函数内部变量的函数。只有函数内部的子函数才能读取局部变量，所以闭包可以理解成定义在一个函数内部的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。来 看一个栗子：123456789function outter()&#123; var i = 0; function inner()&#123; alert(++i) &#125; return inner;&#125;var res = outter();res() 这段代码有两个特点： 1、内层函数inner被外层函数outter包裹 2、执行函数outter返回函数inner这样执行完var res = outter()后，变量res实际上是指向了函数inner，inner中用到了变量i，再执行res()后就会弹出一个窗口显示i的值。这段代码其实就创建了一个闭包。说简单一点：当函数outter的内部函数inner被函数outter外的一个变量引用的时候，就创建了一个我们通常所谓的闭包 闭包的作用闭包的作用就是在outter执行完并返回后，闭包使得Javascript的垃圾回收机制不会收回outter所占用的资源，因为outer的内部函数inner的执行需要依赖outter中的变量。在上面的例子中，由于闭包的存在使得函数outter返回后，outter中的i始终存在，这样每次执行c()，i都是自加1后alert出i的值。那么我们来想象另一种情况，如果outter返回的不是函数inner，情况就完全不同了。因为outter执行完后，inner没有被返回给outter的外界，只是被outter所引用，而此时outter也只会被inner引 用，因此函数outter和inner互相引用但又不被外界打扰（被外界引用），函数outter和inner就会被回收 何时使用闭包当一个变量需要被保护，使其不会被全局污染时使用 使用注意1、由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。2、闭包会在父函数外部，改变父函数内部变量的值。所以，如果把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。]]></content>
  </entry>
  <entry>
    <title><![CDATA[My First Blog]]></title>
    <url>%2F2019%2F03%2F05%2Fmy%20first%20blog%2F</url>
    <content type="text"><![CDATA[Welcome to Xiao Cheng’s blog. If there is anything wrong, please do more correction.My email. instructionHere, I’m going to make some of my personal understandings about the front-end with the front-end of the web. If there’s something wrong, or there’s a better way to welcome you. Thank you.]]></content>
  </entry>
</search>
