<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[跨域的解决方法]]></title>
    <url>%2F2019%2F03%2F07%2FACAO%2F</url>
    <content type="text"><![CDATA[什么是跨域从一个域名下的网页，向另一个域名下的服务端发送请求。这时候就会出现跨域问题。例如：1.域名不同: www.a.com/index.js -&gt; www.b.com/index2.二级域名不同: www.a.study.com/index.js -&gt; www.b.study.com/index3.端口不同: localhost:5500 -&gt;localhost:80004.协议不同: http://localhost -&gt; https://localhost5.域名 -&gt; IP地址以上五种情况，均禁止ajax发送异步请求。 解决方法1.JSONP：原理：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。JSONP：json+padding（内填充），顾名思义，就是把JSON填充到一个盒子里12345678910111213141516171819&lt;script&gt; function createJs(sUrl)&#123; var oScript = document.createElement(&apos;script&apos;); oScript.type = &apos;text/javascript&apos;; oScript.src = sUrl; document.getElementsByTagName(&apos;head&apos;)[0].appendChild(oScript); &#125; createJs(&apos;jsonp.js&apos;); box(&#123; &apos;name&apos;: &apos;test&apos; &#125;); function box(json)&#123; alert(json.name); &#125;&lt;/script&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[json数据]]></title>
    <url>%2F2019%2F03%2F06%2Fjson%2F</url>
    <content type="text"><![CDATA[什么是jsonjson(JavaScript Object Notation)是JavaScript对象表示法;json是存储和交换文本信息的语法(类似于XML)，是一种轻量级的文本数据交换格式,比XML更快更小更易解析。 json的表示方法json的表示方法和对象相似，但又不同。有何不同呢？看个栗子：对象的写法一般是： var aa ={name:&quot;zoumm&quot;,job :&quot;it&quot;,age :25};而json的写法是： {&quot;name&quot;:&quot;zoumm&quot;,&quot;job&quot;:&quot;it&quot;,&quot;age&quot;:23,&quot;school&quot;:{&quot;name&quot;:&quot;大学名&quot;，“add”:&quot;中国&quot;}}由此可以看出：对象的属性名没有加引号，而json对象所有的属性名必须加双引号。 为什么json数据要解析json数据在传输的过程中是以文本格式存在的，即以字符串的形式存在，然而我们的js中操作的却是对象，因此我们必须将json数据解析成对象的操作，然后才能用对象对数据进行访问。 json的数据格式有哪些1.Json字符串： var json_str = &#39;{&quot;name&quot;:&quot;xiao&quot;,&quot;age&quot;:12}&#39;;2.Josn对象： var obj = {&quot;name&quot;:&quot;xiao&quot;,&quot;age&quot;:12}; json数据的解析1.JSON提供了json.js包，下载http://www.json.org/json.js 后，将其引入然后就可以简单的使用object.toJSONString()转换成JSON数据。2.用eval()方法转换到Object，再obj.toJSONString()12345function myEval() &#123; var str = &apos;&#123; &quot;name&quot;: &quot;Violet&quot;, &quot;occupation&quot;: &quot;character&quot; &#125;&apos;; var obj = eval(&apos;(&apos; + str + &apos;)&apos;); alert(obj.toJSONString());&#125; 3.JSON.parse()方法12var a=&apos;&#123;&quot;name&quot;: &quot;Violet&quot;, &quot;occupation&quot;: &quot;character&quot; &#125;&apos;JSON.parse(a) 解析后a就变成了对象a={name: “Violet”, occupation: “character” }。这样我们就可以在js中将其使用当然，也可以将js对象变为json字符串12var a=&#123;name: &quot;Violet&quot;, occupation: &quot;character&quot; &#125;JSON.stringify(a) 何时需要解析json数据当我们从后端拿出来的数据是以json的格式显示出来的，此时我们需要对其处理，即解析。只有解析之后我们才能使用从后端拿出来的数据。]]></content>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中的ajax]]></title>
    <url>%2F2019%2F03%2F06%2Fajax%2F</url>
    <content type="text"><![CDATA[什么是ajaxAjax 即Asynchronous Javascript And XML（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。换句话说，ajax是一种无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，ajax可以是网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。因此，ajax技术的出现大大提高了用户体验。ajax是异步发送请求，那么什么是异步？什么又是同步呢？我们一起来看看 异步与同步1.同步(Synchronous) 在一个任务进行中时，不能开启其它任务。 同步访问：浏览器在向服务器发送请求时，浏览器只能等待服务器的响应，不能够做其它的事情 出现场合： (1).地址栏输入网址访问网页(网速不好的时候更明显) (2).a标签跳转 (3).submit提交表单 跳转之后，前面的表单页面不能再做任何操作了2.异步(Asynchronous) 在一个任务开启时，可以开启其它任务 异步访问：浏览器在向服务器发送请求时，不耽误用户在网页的其它操作。 出现的场合： (1).用户名的重复验证 (2).聊天室 (3).搜索建议 (4).股票走势图 ajax如何实现异步请求1.创建异步对象通过window.XMLHttpRequest是否存在，来判断浏览器是否支持ajax的标准创建。如果有值，为true,进入if块，支持标准创建 var xhr=new XMLHttpRequest();如果没有值，为null，为false。不支持标准创建 var xhr=new ActiveXObject(&quot;Microsoft.XMLHttp&quot;);2.绑定监听事件—接收响应数据123456xhr.onreadystatechange=function()&#123; if(xhr.readyState==4&amp;&amp;xhr.status==200)&#123; //接收响应数据 var result=xhr.responseText; &#125; &#125; (1)readyState 用于表示xhr对象的请求状态 值0~4 表示了5个状态 0：请求尚未初始化 1：已经打开到服务器的连接，正在发送请求 2：接收响应头 3：接收响应主体 4：接收响应数据成功(2)status 表示服务器的响应状态码 值 200 当status的值为200的时候，表示服务器已经正确处理了请求(3)onreadystatechange–事件，监听器 当xhr的readystate属性值发生改变时，自动激发的操作 接收响应数据3.打开链接(创建请求)xhr.open(method,url,isAsyn);注： method:请求的方法 “get”/“post” string类型 url:请求的地址 string类型 isAsyn:是否采用异步 boolean类型 false同步 true异步4.发送请求xhr.send(body);如果有请求主体,post,就把请求主体放在body的位置如果没有请求主体，get,body处放null ajax的优缺点1.优点： (1)可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量 (2)避免用户不断刷新或者跳转页面，提高用户体验2.缺点: (1)要实现ajax下的前后退功能成本较大 (2)可能造成请求数的增加 (3)跨域问题限制]]></content>
  </entry>
  <entry>
    <title><![CDATA[浅谈JavaScript中的闭包]]></title>
    <url>%2F2019%2F03%2F05%2Fclosure%2F</url>
    <content type="text"><![CDATA[什么是闭包闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。换句话说：闭包就是能够读取其他函数内部变量的函数。只有函数内部的子函数才能读取局部变量，所以闭包可以理解成定义在一个函数内部的函数。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。来 看一个栗子：123456789function outter()&#123; var i = 0; function inner()&#123; alert(++i) &#125; return inner;&#125;var res = outter();res() 这段代码有两个特点： 1、内层函数inner被外层函数outter包裹 2、执行函数outter返回函数inner这样执行完var res = outter()后，变量res实际上是指向了函数inner，inner中用到了变量i，再执行res()后就会弹出一个窗口显示i的值。这段代码其实就创建了一个闭包。说简单一点：当函数outter的内部函数inner被函数outter外的一个变量引用的时候，就创建了一个我们通常所谓的闭包 闭包的作用闭包的作用就是在outter执行完并返回后，闭包使得Javascript的垃圾回收机制不会收回outter所占用的资源，因为outer的内部函数inner的执行需要依赖outter中的变量。在上面的例子中，由于闭包的存在使得函数outter返回后，outter中的i始终存在，这样每次执行c()，i都是自加1后alert出i的值。那么我们来想象另一种情况，如果outter返回的不是函数inner，情况就完全不同了。因为outter执行完后，inner没有被返回给outter的外界，只是被outter所引用，而此时outter也只会被inner引 用，因此函数outter和inner互相引用但又不被外界打扰（被外界引用），函数outter和inner就会被回收 何时使用闭包当一个变量需要被保护，使其不会被全局污染时使用 使用注意1、由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。2、闭包会在父函数外部，改变父函数内部变量的值。所以，如果把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。]]></content>
  </entry>
  <entry>
    <title><![CDATA[My First Blog]]></title>
    <url>%2F2019%2F03%2F05%2Fmy%20first%20blog%2F</url>
    <content type="text"><![CDATA[Welcome to Xiao Cheng’s blog. If there is anything wrong, please do more correction.My email. instructionHere, I’m going to make some of my personal understandings about the front-end with the front-end of the web. If there’s something wrong, or there’s a better way to welcome you. Thank you.]]></content>
  </entry>
</search>
